"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5752],{1617:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"question-answer/msg_vs_srv","title":"Difference Between Srv and Msg in ROS2","description":"In ROS2 (Robot Operating System 2), srv (services) and msg (messages) are fundamental concepts used for communication between nodes. Here\u2019s a detailed explanation of the difference between them, along with a tutorial to illustrate their usage with a concrete example.","source":"@site/docs/08_question-answer/msg_vs_srv.md","sourceDirName":"08_question-answer","slug":"/question-answer/msg_vs_srv","permalink":"/docs/question-answer/msg_vs_srv","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/08_question-answer/msg_vs_srv.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/category/introduction-1"},"next":{"title":"Automatically Source ROS 2 Workspace in New Terminal Sessions","permalink":"/docs/question-answer/workspace"}}');var t=s(4848),i=s(8453);const a={},o="Difference Between Srv and Msg in ROS2",c={},l=[{value:"Messages (<code>msg</code>)",id:"messages-msg",level:2},{value:"Services (<code>srv</code>)",id:"services-srv",level:2},{value:"Messages (Message)",id:"messages-message",level:2},{value:"Services (Service)",id:"services-service",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"difference-between-srv-and-msg-in-ros2",children:"Difference Between Srv and Msg in ROS2"})}),"\n",(0,t.jsxs)(n.p,{children:["In ROS2 (Robot Operating System 2), ",(0,t.jsx)(n.code,{children:"srv"})," (services) and ",(0,t.jsx)(n.code,{children:"msg"})," (messages) are fundamental concepts used for communication between nodes. Here\u2019s a detailed explanation of the difference between them, along with a tutorial to illustrate their usage with a concrete example."]}),"\n",(0,t.jsxs)(n.h2,{id:"messages-msg",children:["Messages (",(0,t.jsx)(n.code,{children:"msg"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"Messages in ROS2 are used for unidirectional communication. They are defined data structures that can be sent over topics. Topics are named buses over which nodes exchange messages. A node can publish a message to a topic, and multiple other nodes can subscribe to that topic to receive the message."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Use Case"}),": Continuous data streaming, such as sensor data (e.g., a camera image or LIDAR scan)."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),": A node publishes temperature readings to a ",(0,t.jsx)(n.code,{children:"/temperature"})," topic, and multiple nodes subscribe to this topic to process the data."]}),"\n",(0,t.jsxs)(n.h2,{id:"services-srv",children:["Services (",(0,t.jsx)(n.code,{children:"srv"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"Services in ROS2 provide a request/reply communication model. They are used for bidirectional communication. A service consists of a request and a response. A node can send a request to another node that offers the service, and then wait for a response."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Use Case"}),": On-demand data retrieval or actions, such as querying the current position of a robot or commanding a robot to move to a specific location."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example"}),": A node requests the current position of a robot by calling a ",(0,t.jsx)(n.code,{children:"/get_position"})," service, and the service node replies with the position data."]}),"\n",(0,t.jsx)(n.h1,{id:"concrete-example-temperature-query",children:"Concrete Example: Temperature Query"}),"\n",(0,t.jsx)(n.p,{children:"Let's imagine we have a ROS2 system that should monitor the current temperature. We will use both messages and services to illustrate the difference."}),"\n",(0,t.jsx)(n.h2,{id:"messages-message",children:"Messages (Message)"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Definition of the Message"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Create a message file ",(0,t.jsx)(n.code,{children:"Temperature.msg"})," in the ",(0,t.jsx)(n.code,{children:"msg"})," directory."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"float32 temperature\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Publisher Node"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A node that publishes temperature values."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import rclpy\nfrom rclpy.node import Node\nfrom example_interfaces.msg import Temperature\n\nclass TemperaturePublisher(Node):\n    def __init__(self):\n        super().__init__('temperature_publisher')\n        self.publisher_ = self.create_publisher(Temperature, 'temperature', 10)\n        timer_period = 2.0  # seconds\n        self.timer = self.create_timer(timer_period, self.publish_temperature)\n\n    def publish_temperature(self):\n        msg = Temperature()\n        msg.temperature = 24.0  # This could be an actual sensor value\n        self.publisher_.publish(msg)\n        self.get_logger().info(f'Publishing: \"{msg.temperature}\"')\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = TemperaturePublisher()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Subscriber Node"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A node that receives and processes temperature values."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import rclpy\nfrom rclpy.node import Node\nfrom example_interfaces.msg import Temperature\n\nclass TemperatureSubscriber(Node):\n    def __init__(self):\n        super().__init__('temperature_subscriber')\n        self.subscription = self.create_subscription(\n            Temperature,\n            'temperature',\n            self.temperature_callback,\n            10)\n        self.subscription  # prevent unused variable warning\n\n    def temperature_callback(self, msg):\n        self.get_logger().info(f'I heard: \"{msg.temperature}\"')\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = TemperatureSubscriber()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"services-service",children:"Services (Service)"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Definition of the Service"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Create a service file ",(0,t.jsx)(n.code,{children:"GetTemperature.srv"})," in the ",(0,t.jsx)(n.code,{children:"srv"})," directory."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"---\nfloat32 temperature\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Service Server Node"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A node that provides temperature values on request."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import rclpy\nfrom rclpy.node import Node\nfrom example_interfaces.srv import GetTemperature\n\nclass TemperatureService(Node):\n    def __init__(self):\n        super().__init__('temperature_service')\n        self.srv = self.create_service(GetTemperature, 'get_temperature', self.get_temperature_callback)\n\n    def get_temperature_callback(self, request, response):\n        response.temperature = 24.0  # This could be an actual sensor value\n        self.get_logger().info(f'Returning temperature: {response.temperature}')\n        return response\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = TemperatureService()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Service Client Node"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A node that requests the temperature value from the service."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import rclpy\nfrom rclpy.node import Node\nfrom example_interfaces.srv import GetTemperature\n\nclass TemperatureClient(Node):\n    def __init__(self):\n        super().__init__('temperature_client')\n        self.cli = self.create_client(GetTemperature, 'get_temperature')\n        while not self.cli.wait_for_service(timeout_sec=1.0):\n            self.get_logger().info('Service not available, waiting again...')\n        self.req = GetTemperature.Request()\n\n    def send_request(self):\n        self.future = self.cli.call_async(self.req)\n        rclpy.spin_until_future_complete(self, self.future)\n        return self.future.result()\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = TemperatureClient()\n    response = node.send_request()\n    node.get_logger().info(f'Result: {response.temperature}')\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"summary",children:"Summary"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Messages (",(0,t.jsx)(n.code,{children:"msg"}),")"]}),": For continuous data transmission between publishers and subscribers over topics."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Services (",(0,t.jsx)(n.code,{children:"srv"}),")"]}),": For bidirectional communication with requests and responses."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In this example, ",(0,t.jsx)(n.code,{children:"msg"})," is used to continuously publish temperature data, which can be received by multiple nodes. ",(0,t.jsx)(n.code,{children:"srv"})," is used to perform a temperature query where a client sends a request to a server and receives a response. This distinction is crucial for choosing the right form of communication for different use cases in ROS2."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var r=s(6540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);