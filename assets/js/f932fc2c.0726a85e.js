"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2219],{4857:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"interfaces/interfaces","title":"ROS 2 Interfaces","description":"In this guide, we will delve into ROS 2 interfaces, exploring their roles in node communication, and providing detailed steps to create and use custom message and service definitions. We will also critically analyze the existing explanation and rectify any inaccuracies.","source":"@site/docs/05_interfaces/02_interfaces.md","sourceDirName":"05_interfaces","slug":"/interfaces/interfaces","permalink":"/docs/interfaces/interfaces","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/05_interfaces/02_interfaces.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ROS2 Interfaces","permalink":"/docs/interfaces/intro"},"next":{"title":"Creating a Custom ROS 2 Message","permalink":"/docs/interfaces/create-custom-msg"}}');var t=n(4848),r=n(8453);const c={},a="ROS 2 Interfaces",l={},o=[{value:"Understanding ROS 2 Interfaces",id:"understanding-ros-2-interfaces",level:2},{value:"Topics",id:"topics",level:2},{value:"Services",id:"services",level:2},{value:"Real-Life Analogy",id:"real-life-analogy",level:2},{value:"Technical Implementation",id:"technical-implementation",level:2},{value:"Creating Custom Messages and Services",id:"creating-custom-messages-and-services",level:2},{value:"Step 1: Create a ROS 2 Package",id:"step-1-create-a-ros-2-package",level:2},{value:"Step 2: Define Message and Service Files",id:"step-2-define-message-and-service-files",level:2},{value:"Step 3: Modify the <code>CMakeLists.txt</code>",id:"step-3-modify-the-cmakeliststxt",level:2},{value:"Step 4: Modify the <code>package.xml</code>",id:"step-4-modify-the-packagexml",level:2},{value:"Step 5: Build the Package",id:"step-5-build-the-package",level:2},{value:"Step 6: Using Custom Messages and Services",id:"step-6-using-custom-messages-and-services",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"ros-2-interfaces",children:"ROS 2 Interfaces"})}),"\n",(0,t.jsx)(s.p,{children:"In this guide, we will delve into ROS 2 interfaces, exploring their roles in node communication, and providing detailed steps to create and use custom message and service definitions. We will also critically analyze the existing explanation and rectify any inaccuracies."}),"\n",(0,t.jsx)(s.h2,{id:"understanding-ros-2-interfaces",children:"Understanding ROS 2 Interfaces"}),"\n",(0,t.jsx)(s.p,{children:"In ROS 2, interfaces are essential for communication between nodes. These interfaces include:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Messages"}),": Used in topics for unidirectional communication."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Services"}),": Used for bidirectional communication with a request-response pattern."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"topics",children:"Topics"}),"\n",(0,t.jsx)(s.p,{children:"Topics are characterized by:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Name"}),": A unique identifier for the topic."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Interface (Message Definition)"}),": The data structure defining the type of message being sent."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"services",children:"Services"}),"\n",(0,t.jsx)(s.p,{children:"Services are characterized by:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Name"}),": A unique identifier for the service."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Interface (Service Definition)"}),": Comprises two message definitions\u2014one for the request and one for the response."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"real-life-analogy",children:"Real-Life Analogy"}),"\n",(0,t.jsx)(s.p,{children:"Consider sending a letter via mail:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Topics"}),": Analogous to sending a letter where the content (message) is delivered by the postal service (transport layer)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Services"}),": Analogous to sending a letter and receiving a reply. The initial letter (request) prompts a response letter (response)."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,t.jsx)(s.p,{children:"When creating a custom message or service definition in ROS 2, the process involves defining the message in a specific format, building it, and using the generated source code in your application."}),"\n",(0,t.jsx)(s.h2,{id:"creating-custom-messages-and-services",children:"Creating Custom Messages and Services"}),"\n",(0,t.jsx)(s.h2,{id:"step-1-create-a-ros-2-package",children:"Step 1: Create a ROS 2 Package"}),"\n",(0,t.jsx)(s.p,{children:"First, create a new ROS 2 package where you will define your custom messages and services."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"ros2 pkg create --build-type ament_cmake my_custom_interfaces\n"})}),"\n",(0,t.jsx)(s.h2,{id:"step-2-define-message-and-service-files",children:"Step 2: Define Message and Service Files"}),"\n",(0,t.jsx)(s.p,{children:"Inside your package, create the necessary directories and files."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"cd my_custom_interfaces\nmkdir msg srv\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Create a message file ",(0,t.jsx)(s.code,{children:"msg/MyCustomMessage.msg"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"string name\nint32 age\nbool is_student\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Create a service file ",(0,t.jsx)(s.code,{children:"srv/MyCustomService.srv"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"# Request\nstring name\nint32 age\n\n---\n# Response\nbool success\nstring message\n"})}),"\n",(0,t.jsxs)(s.h2,{id:"step-3-modify-the-cmakeliststxt",children:["Step 3: Modify the ",(0,t.jsx)(s.code,{children:"CMakeLists.txt"})]}),"\n",(0,t.jsxs)(s.p,{children:["Edit the ",(0,t.jsx)(s.code,{children:"CMakeLists.txt"})," file to include your message and service definitions."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cmake",children:'find_package(rosidl_default_generators REQUIRED)\n\nrosidl_generate_interfaces(${PROJECT_NAME}\n  "msg/MyCustomMessage.msg"\n  "srv/MyCustomService.srv"\n)\n'})}),"\n",(0,t.jsxs)(s.h2,{id:"step-4-modify-the-packagexml",children:["Step 4: Modify the ",(0,t.jsx)(s.code,{children:"package.xml"})]}),"\n",(0,t.jsxs)(s.p,{children:["Ensure the ",(0,t.jsx)(s.code,{children:"package.xml"})," includes the necessary dependencies."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-xml",children:"<build_depend>rosidl_default_generators</build_depend>\n<exec_depend>rosidl_default_runtime</exec_depend>\n"})}),"\n",(0,t.jsx)(s.h2,{id:"step-5-build-the-package",children:"Step 5: Build the Package"}),"\n",(0,t.jsx)(s.p,{children:"Build your package to generate the necessary source files."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"colcon build --packages-select my_custom_interfaces\n"})}),"\n",(0,t.jsx)(s.h2,{id:"step-6-using-custom-messages-and-services",children:"Step 6: Using Custom Messages and Services"}),"\n",(0,t.jsx)(s.p,{children:"Now, you can use your custom messages and services in your ROS 2 nodes."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Python Example:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"import rclpy\nfrom rclpy.node import Node\nfrom my_custom_interfaces.msg import MyCustomMessage\nfrom my_custom_interfaces.srv import MyCustomService\n\nclass CustomNode(Node):\n\n    def __init__(self):\n        super().__init__('custom_node')\n        self.publisher_ = self.create_publisher(MyCustomMessage, 'custom_topic', 10)\n        self.timer_ = self.create_timer(2.0, self.publish_message)\n        self.client_ = self.create_client(MyCustomService, 'custom_service')\n        while not self.client_.wait_for_service(timeout_sec=1.0):\n            self.get_logger().info('Service not available, waiting...')\n\n    def publish_message(self):\n        msg = MyCustomMessage()\n        msg.name = 'John Doe'\n        msg.age = 30\n        msg.is_student = False\n        self.publisher_.publish(msg)\n        self.get_logger().info('Publishing: \"%s\"' % msg.name)\n\n    def call_service(self):\n        req = MyCustomService.Request()\n        req.name = 'Jane Doe'\n        req.age = 25\n        future = self.client_.call_async(req)\n        future.add_done_callback(self.service_callback)\n\n    def service_callback(self, future):\n        try:\n            response = future.result()\n            self.get_logger().info('Response: \"%s\"' % response.message)\n        except Exception as e:\n            self.get_logger().error('Service call failed %r' % (e,))\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = CustomNode()\n    try:\n        rclpy.spin(node)\n    except KeyboardInterrupt:\n        node.get_logger().info('Node stopped cleanly')\n    except BaseException:\n        node.get_logger().error('Exception in node: %s' % (traceback.format_exc(),))\n    finally:\n        rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"C++ Example:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'#include "rclcpp/rclcpp.hpp"\n#include "my_custom_interfaces/msg/my_custom_message.hpp"\n#include "my_custom_interfaces/srv/my_custom_service.hpp"\n\nclass CustomNode : public rclcpp::Node\n{\npublic:\n    CustomNode() : Node("custom_node")\n    {\n        publisher_ = this->create_publisher<my_custom_interfaces::msg::MyCustomMessage>("custom_topic", 10);\n        timer_ = this->create_wall_timer(2000ms, std::bind(&CustomNode::publish_message, this));\n        client_ = this->create_client<my_custom_interfaces::srv::MyCustomService>("custom_service");\n\n        while (!client_->wait_for_service(1s))\n        {\n            RCLCPP_INFO(this->get_logger(), "Service not available, waiting...");\n        }\n    }\n\nprivate:\n    void publish_message()\n    {\n        auto msg = my_custom_interfaces::msg::MyCustomMessage();\n        msg.name = "John Doe";\n        msg.age = 30;\n        msg.is_student = false;\n        publisher_->publish(msg);\n        RCLCPP_INFO(this->get_logger(), "Publishing: \'%s\'", msg.name.c_str());\n    }\n\n    void call_service()\n    {\n        auto request = std::make_shared<my_custom_interfaces::srv::MyCustomService::Request>();\n        request->name = "Jane Doe";\n        request->age = 25;\n        auto result = client_->async_send_request(request, std::bind(&CustomNode::service_callback, this, std::placeholders::_1));\n    }\n\n    void service_callback(rclcpp::Client<my_custom_interfaces::srv::MyCustomService>::SharedFuture future)\n    {\n        auto response = future.get();\n        RCLCPP_INFO(this->get_logger(), "Response: \'%s\'", response->message.c_str());\n    }\n\n    rclcpp::Publisher<my_custom_interfaces::msg::MyCustomMessage>::SharedPtr publisher_;\n    rclcpp::TimerBase::SharedPtr timer_;\n    rclcpp::Client<my_custom_interfaces::srv::MyCustomService>::SharedPtr client_;\n};\n\nint main(int argc, char **argv)\n{\n    rclcpp::init(argc, argv);\n    auto node = std::make_shared<CustomNode>();\n    rclcpp::spin(node);\n    rclcpp::shutdown();\n    return 0;\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(s.p,{children:"This guide has provided a detailed overview of ROS 2 interfaces, covering their significance, technical implementation, and practical examples. By following these steps, you can create custom message and service definitions for your ROS 2 applications, enhancing the communication capabilities of your robotic systems. Always refer to the official ROS 2 documentation and community resources for additional support and updates."})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>a});var i=n(6540);const t={},r=i.createContext(t);function c(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);