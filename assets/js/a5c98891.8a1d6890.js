"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2703],{6737:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"tools/discover-turtlesim","title":"Working with the turtlesim Package","description":"This tutorial provides a detailed guide to using the turtlesim package in ROS2. The turtlesim package is a simplified simulation of a robot that serves as an excellent introduction to the principles of ROS2. By following this guide, you will gain practical experience in installing, running, and manipulating nodes within ROS2.","source":"@site/docs/02_tools/06_discover-turtlesim.md","sourceDirName":"02_tools","slug":"/tools/discover-turtlesim","permalink":"/ROS2-Beginners/docs/tools/discover-turtlesim","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02_tools/06_discover-turtlesim.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rqt and rqt_graph in ROS 2","permalink":"/ROS2-Beginners/docs/tools/rqt-rqt_graph"},"next":{"title":"Topics","permalink":"/ROS2-Beginners/docs/category/topics"}}');var s=t(4848),o=t(8453);const r={},l="Working with the turtlesim Package",a={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installing the <code>turtlesim</code> Package",id:"installing-the-turtlesim-package",level:2},{value:"Setting Up the Environment",id:"setting-up-the-environment",level:2},{value:"Running the <code>turtlesim</code> Node",id:"running-the-turtlesim-node",level:2},{value:"Interacting with <code>turtlesim</code>",id:"interacting-with-turtlesim",level:2},{value:"Listing Active Nodes",id:"listing-active-nodes",level:3},{value:"Controlling the Turtle",id:"controlling-the-turtle",level:3},{value:"Understanding Node Communication",id:"understanding-node-communication",level:3},{value:"Commanding the Turtle Programmatically",id:"commanding-the-turtle-programmatically",level:3},{value:"Renaming Nodes",id:"renaming-nodes",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsxs)(n.h1,{id:"working-with-the-turtlesim-package",children:["Working with the ",(0,s.jsx)(n.code,{children:"turtlesim"})," Package"]})}),"\n",(0,s.jsxs)(n.p,{children:["This tutorial provides a detailed guide to using the ",(0,s.jsx)(n.code,{children:"turtlesim"})," package in ROS2. The ",(0,s.jsx)(n.code,{children:"turtlesim"})," package is a simplified simulation of a robot that serves as an excellent introduction to the principles of ROS2. By following this guide, you will gain practical experience in installing, running, and manipulating nodes within ROS2."]}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.p,{children:"Ensure you have a working ROS2 installation on your system. This tutorial assumes you are familiar with basic ROS2 concepts, such as nodes, topics, and the ROS2 command-line interface."}),"\n",(0,s.jsxs)(n.h2,{id:"installing-the-turtlesim-package",children:["Installing the ",(0,s.jsx)(n.code,{children:"turtlesim"})," Package"]}),"\n",(0,s.jsxs)(n.p,{children:["To begin, you need to install the ",(0,s.jsx)(n.code,{children:"turtlesim"})," package. Open a terminal and use the following command, replacing ",(0,s.jsx)(n.code,{children:"<distro>"})," with your specific ROS2 distribution (e.g., ",(0,s.jsx)(n.code,{children:"foxy"}),", ",(0,s.jsx)(n.code,{children:"galactic"}),", ",(0,s.jsx)(n.code,{children:"humble"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt install ros-<distro>-turtlesim\n"})}),"\n",(0,s.jsx)(n.p,{children:"For instance, if you are using ROS2 Foxy, the command would be:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt install ros-foxy-turtlesim\n"})}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-the-environment",children:"Setting Up the Environment"}),"\n",(0,s.jsxs)(n.p,{children:["After installing ",(0,s.jsx)(n.code,{children:"turtlesim"}),", you need to source your ROS2 workspace. This step is crucial for making ROS2 aware of the newly installed packages. In a terminal, run:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"source /opt/ros/<distro>/setup.bash\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Replace ",(0,s.jsx)(n.code,{children:"<distro>"})," with your ROS2 distribution."]}),"\n",(0,s.jsxs)(n.h2,{id:"running-the-turtlesim-node",children:["Running the ",(0,s.jsx)(n.code,{children:"turtlesim"})," Node"]}),"\n",(0,s.jsxs)(n.p,{children:["Now that the environment is set up, you can launch the ",(0,s.jsx)(n.code,{children:"turtlesim"})," node. Open a new terminal and execute:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ros2 run turtlesim turtlesim_node\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This command will open a graphical window displaying a turtle in the center. The ",(0,s.jsx)(n.code,{children:"turtlesim_node"})," is now running and ready to receive commands."]}),"\n",(0,s.jsxs)(n.h2,{id:"interacting-with-turtlesim",children:["Interacting with ",(0,s.jsx)(n.code,{children:"turtlesim"})]}),"\n",(0,s.jsx)(n.h3,{id:"listing-active-nodes",children:"Listing Active Nodes"}),"\n",(0,s.jsx)(n.p,{children:"To see the active nodes, use the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ros2 node list\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You should see ",(0,s.jsx)(n.code,{children:"turtlesim_node"})," in the list of active nodes."]}),"\n",(0,s.jsx)(n.h3,{id:"controlling-the-turtle",children:"Controlling the Turtle"}),"\n",(0,s.jsxs)(n.p,{children:["You can control the turtle using another node called ",(0,s.jsx)(n.code,{children:"turtle_teleop_key"}),". Open a new terminal and run:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ros2 run turtlesim turtle_teleop_key\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This node allows you to control the turtle using the arrow keys on your keyboard. The ",(0,s.jsx)(n.code,{children:"turtle_teleop_key"})," node captures your key inputs and sends them to the ",(0,s.jsx)(n.code,{children:"turtlesim_node"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"understanding-node-communication",children:"Understanding Node Communication"}),"\n",(0,s.jsxs)(n.p,{children:["To visualize the communication between nodes, you can use the ",(0,s.jsx)(n.code,{children:"rqt_graph"})," tool. First, ensure ",(0,s.jsx)(n.code,{children:"rqt"})," is installed:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt install ros-<distro>-rqt-graph\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then, in a new terminal, run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"rqt_graph\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This command opens a graphical interface displaying the nodes and topics involved in the current ROS2 system. You should see ",(0,s.jsx)(n.code,{children:"turtle_teleop_key"})," communicating with ",(0,s.jsx)(n.code,{children:"turtlesim_node"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"commanding-the-turtle-programmatically",children:"Commanding the Turtle Programmatically"}),"\n",(0,s.jsxs)(n.p,{children:["Nodes in ROS2 communicate via topics. The ",(0,s.jsx)(n.code,{children:"turtlesim_node"})," listens to a topic named ",(0,s.jsx)(n.code,{children:"/turtle1/cmd_vel"})," for velocity commands. You can publish messages to this topic to control the turtle. For example, to make the turtle move forward, open a new terminal and run:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'ros2 topic pub /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 0.0}}"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This command publishes a ",(0,s.jsx)(n.code,{children:"Twist"})," message to the ",(0,s.jsx)(n.code,{children:"/turtle1/cmd_vel"})," topic, causing the turtle to move forward with a linear velocity of 2.0 units."]}),"\n",(0,s.jsx)(n.h3,{id:"renaming-nodes",children:"Renaming Nodes"}),"\n",(0,s.jsxs)(n.p,{children:["You can also rename nodes using the ",(0,s.jsx)(n.code,{children:"--ros-args --remap"})," option. For instance, to rename ",(0,s.jsx)(n.code,{children:"turtlesim_node"})," to ",(0,s.jsx)(n.code,{children:"my_turtle"}),", use the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtle\n"})}),"\n",(0,s.jsxs)(n.p,{children:["After running this command, if you list the active nodes again using ",(0,s.jsx)(n.code,{children:"ros2 node list"}),", you will see ",(0,s.jsx)(n.code,{children:"my_turtle"})," instead of ",(0,s.jsx)(n.code,{children:"turtlesim_node"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(n.p,{children:["In this tutorial, you have learned how to install, run, and interact with the ",(0,s.jsx)(n.code,{children:"turtlesim"})," package in ROS2. You have also explored node communication, controlling nodes programmatically, and renaming nodes. These skills provide a solid foundation for further exploration and development within the ROS2 ecosystem."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);