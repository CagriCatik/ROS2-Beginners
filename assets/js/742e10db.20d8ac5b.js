"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4632],{9201:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"interfaces/intro","title":"ROS2 Interfaces","description":"ROS2 (Robot Operating System 2) interfaces are the mechanisms through which data is communicated between nodes in the form of messages and services. These interfaces define the structure of the data being transmitted, ensuring that the sending and receiving nodes understand the format and content of the information being exchanged.","source":"@site/docs/05_interfaces/01_intro.md","sourceDirName":"05_interfaces","slug":"/interfaces/intro","permalink":"/ROS2-Beginners/docs/interfaces/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/05_interfaces/01_intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Interfaces","permalink":"/ROS2-Beginners/docs/category/interfaces"},"next":{"title":"ROS 2 Interfaces","permalink":"/ROS2-Beginners/docs/interfaces/interfaces"}}');var r=s(4848),c=s(8453);const t={},a="ROS2 Interfaces",l={},d=[{value:"Understanding ROS2 Interfaces",id:"understanding-ros2-interfaces",level:2},{value:"Creating Custom Messages",id:"creating-custom-messages",level:2},{value:"Creating Custom Services",id:"creating-custom-services",level:2},{value:"Using Custom Interfaces in Nodes",id:"using-custom-interfaces-in-nodes",level:2},{value:"Publisher Node Example",id:"publisher-node-example",level:2},{value:"Subscriber Node Example",id:"subscriber-node-example",level:2},{value:"Service Server Node Example",id:"service-server-node-example",level:2},{value:"Service Client Node Example",id:"service-client-node-example",level:2},{value:"Conclusion",id:"conclusion",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ros2-interfaces",children:"ROS2 Interfaces"})}),"\n",(0,r.jsx)(n.p,{children:"ROS2 (Robot Operating System 2) interfaces are the mechanisms through which data is communicated between nodes in the form of messages and services. These interfaces define the structure of the data being transmitted, ensuring that the sending and receiving nodes understand the format and content of the information being exchanged."}),"\n",(0,r.jsx)(n.p,{children:"In this tutorial, we will learn how to create and build custom message and service types in ROS2, and how to use these custom interfaces within your nodes, topics, and services. By the end of this section, you will be able to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create and build your own interfaces with message (msg) and service (srv) definitions."}),"\n",(0,r.jsx)(n.li,{children:"Use these custom interfaces with your topics and services."}),"\n",(0,r.jsx)(n.li,{children:"Implement a complete activity involving nodes, topics, services, and custom interfaces."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"understanding-ros2-interfaces",children:"Understanding ROS2 Interfaces"}),"\n",(0,r.jsxs)(n.p,{children:["ROS2 interfaces are defined in ",(0,r.jsx)(n.code,{children:".msg"})," (message) and ",(0,r.jsx)(n.code,{children:".srv"})," (service) files. These files specify the structure of the data that will be transmitted. A message file defines a data structure for a single message, while a service file defines a request-response communication pattern."]}),"\n",(0,r.jsx)(n.h2,{id:"creating-custom-messages",children:"Creating Custom Messages"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create a New Package:"})}),"\n",(0,r.jsxs)(n.p,{children:["First, create a new ROS2 package where you will define your custom messages and services. Use the ",(0,r.jsx)(n.code,{children:"ros2 pkg create"})," command to generate the package:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 pkg create --build-type ament_cmake my_custom_interfaces\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Define Message Files:"})}),"\n",(0,r.jsx)(n.p,{children:"Inside your package, create a directory for message files:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir -p my_custom_interfaces/msg\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Create a new message file, for example, ",(0,r.jsx)(n.code,{children:"MyMessage.msg"}),", in the ",(0,r.jsx)(n.code,{children:"msg"})," directory:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"touch my_custom_interfaces/msg/MyMessage.msg\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Define the content of your message in ",(0,r.jsx)(n.code,{children:"MyMessage.msg"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plaintext",children:"int32 id\nstring content\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Update the CMakeLists.txt:"})}),"\n",(0,r.jsxs)(n.p,{children:["Modify the ",(0,r.jsx)(n.code,{children:"CMakeLists.txt"})," file to include the message generation:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cmake",children:'find_package(rosidl_default_generators REQUIRED)\n\nrosidl_generate_interfaces(${PROJECT_NAME}\n  "msg/MyMessage.msg"\n)\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Update the package.xml:"})}),"\n",(0,r.jsxs)(n.p,{children:["Ensure the ",(0,r.jsx)(n.code,{children:"package.xml"})," file includes the necessary dependencies for message generation:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<build_depend>rosidl_default_generators</build_depend>\n<exec_depend>rosidl_default_runtime</exec_depend>\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Build the Package:"})}),"\n",(0,r.jsx)(n.p,{children:"After defining your message and updating the necessary files, build your package:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"colcon build --packages-select my_custom_interfaces\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"creating-custom-services",children:"Creating Custom Services"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Define Service Files:"})}),"\n",(0,r.jsx)(n.p,{children:"Similar to message files, create a directory for service files:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir -p my_custom_interfaces/srv\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Create a new service file, for example, ",(0,r.jsx)(n.code,{children:"MyService.srv"}),", in the ",(0,r.jsx)(n.code,{children:"srv"})," directory:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"touch my_custom_interfaces/srv/MyService.srv\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Define the request and response fields in ",(0,r.jsx)(n.code,{children:"MyService.srv"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plaintext",children:"int32 a\nint32 b\n---\nint32 sum\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Update the CMakeLists.txt:"})}),"\n",(0,r.jsxs)(n.p,{children:["Modify the ",(0,r.jsx)(n.code,{children:"CMakeLists.txt"})," file to include the service generation:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cmake",children:'rosidl_generate_interfaces(${PROJECT_NAME}\n  "msg/MyMessage.msg"\n  "srv/MyService.srv"\n)\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Update the package.xml:"})}),"\n",(0,r.jsxs)(n.p,{children:["Ensure the ",(0,r.jsx)(n.code,{children:"package.xml"})," file includes the necessary dependencies for service generation:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<build_depend>rosidl_default_generators</build_depend>\n<exec_depend>rosidl_default_runtime</exec_depend>\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Build the Package:"})}),"\n",(0,r.jsx)(n.p,{children:"After defining your service and updating the necessary files, build your package:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"colcon build --packages-select my_custom_interfaces\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"using-custom-interfaces-in-nodes",children:"Using Custom Interfaces in Nodes"}),"\n",(0,r.jsx)(n.p,{children:"Once you have created and built your custom message and service types, you can use them in your ROS2 nodes."}),"\n",(0,r.jsx)(n.h2,{id:"publisher-node-example",children:"Publisher Node Example"}),"\n",(0,r.jsxs)(n.p,{children:["Here is an example of a simple publisher node using the custom message ",(0,r.jsx)(n.code,{children:"MyMessage"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import rclpy\nfrom rclpy.node import Node\nfrom my_custom_interfaces.msg import MyMessage\n\nclass MyPublisher(Node):\n\n    def __init__(self):\n        super().__init__('my_publisher')\n        self.publisher_ = self.create_publisher(MyMessage, 'my_topic', 10)\n        timer_period = 1.0  # seconds\n        self.timer = self.create_timer(timer_period, self.timer_callback)\n\n    def timer_callback(self):\n        msg = MyMessage()\n        msg.id = 1\n        msg.content = 'Hello, ROS2!'\n        self.publisher_.publish(msg)\n        self.get_logger().info(f'Publishing: {msg.id}, {msg.content}')\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyPublisher()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"subscriber-node-example",children:"Subscriber Node Example"}),"\n",(0,r.jsxs)(n.p,{children:["Here is an example of a simple subscriber node using the custom message ",(0,r.jsx)(n.code,{children:"MyMessage"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import rclpy\nfrom rclpy.node import Node\nfrom my_custom_interfaces.msg import MyMessage\n\nclass MySubscriber(Node):\n\n    def __init__(self):\n        super().__init__('my_subscriber')\n        self.subscription = self.create_subscription(\n            MyMessage,\n            'my_topic',\n            self.listener_callback,\n            10)\n        self.subscription\n\n    def listener_callback(self, msg):\n        self.get_logger().info(f'I heard: {msg.id}, {msg.content}')\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MySubscriber()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"service-server-node-example",children:"Service Server Node Example"}),"\n",(0,r.jsxs)(n.p,{children:["Here is an example of a simple service server node using the custom service ",(0,r.jsx)(n.code,{children:"MyService"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import rclpy\nfrom rclpy.node import Node\nfrom my_custom_interfaces.srv import MyService\n\nclass MyServiceServer(Node):\n\n    def __init__(self):\n        super().__init__('my_service_server')\n        self.srv = self.create_service(MyService, 'my_service', self.service_callback)\n\n    def service_callback(self, request, response):\n        response.sum = request.a + request.b\n        self.get_logger().info(f'Service request: {request.a} + {request.b} = {response.sum}')\n        return response\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyServiceServer()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"service-client-node-example",children:"Service Client Node Example"}),"\n",(0,r.jsxs)(n.p,{children:["Here is an example of a simple service client node using the custom service ",(0,r.jsx)(n.code,{children:"MyService"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import rclpy\nfrom rclpy.node import Node\nfrom my_custom_interfaces.srv import MyService\n\nclass MyServiceClient(Node):\n\n    def __init__(self):\n        super().__init__('my_service_client')\n        self.client = self.create_client(MyService, 'my_service')\n        while not self.client.wait_for_service(timeout_sec=1.0):\n            self.get_logger().info('Service not available, waiting again...')\n        self.request = MyService.Request()\n\n    def send_request(self):\n        self.request.a = 10\n        self.request.b = 20\n        self.future = self.client.call_async(self.request)\n        rclpy.spin_until_future_complete(self, self.future)\n        return self.future.result()\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyServiceClient()\n    response = node.send_request()\n    node.get_logger().info(f'Service response: {response.sum}')\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"By following this tutorial, you have learned how to create and build custom message and service types in ROS2. You also implemented publisher, subscriber, service server, and service client nodes using these custom interfaces. Understanding how to define and use custom interfaces is essential for developing complex ROS2 applications that require specific data structures and communication patterns."})]})}function m(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(6540);const r={},c=i.createContext(r);function t(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);