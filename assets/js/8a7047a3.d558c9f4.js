"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4140],{1364:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"interfaces/create-custom-msg","title":"Creating a Custom ROS 2 Message","description":"In this tutorial, we will create a custom ROS 2 message. Custom messages allow you to define specific data structures that your nodes can use to communicate. To maintain a clean and manageable codebase, we recommend creating a dedicated package for all your custom message definitions.","source":"@site/docs/05_interfaces/03_create-custom-msg.md","sourceDirName":"05_interfaces","slug":"/interfaces/create-custom-msg","permalink":"/docs/interfaces/create-custom-msg","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/05_interfaces/03_create-custom-msg.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ROS 2 Interfaces","permalink":"/docs/interfaces/interfaces"},"next":{"title":"ROS2 Custom Message: Python and C++ Integration","permalink":"/docs/interfaces/use-custom-msg-cpp"}}');var a=n(4848),t=n(8453);const i={},c="Creating a Custom ROS 2 Message",d={},o=[{value:"Step 1: Create a Dedicated Package for Custom Messages",id:"step-1-create-a-dedicated-package-for-custom-messages",level:2},{value:"Step 2: Configure Package Files",id:"step-2-configure-package-files",level:2},{value:"Step 3: Define Your Custom Message",id:"step-3-define-your-custom-message",level:2},{value:"Step 4: Build the Package",id:"step-4-build-the-package",level:2},{value:"Step 5: Verify the Message",id:"step-5-verify-the-message",level:2},{value:"Step 6: Use the Custom Message in Your Code",id:"step-6-use-the-custom-message-in-your-code",level:2},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"creating-a-custom-ros-2-message",children:"Creating a Custom ROS 2 Message"})}),"\n",(0,a.jsx)(s.p,{children:"In this tutorial, we will create a custom ROS 2 message. Custom messages allow you to define specific data structures that your nodes can use to communicate. To maintain a clean and manageable codebase, we recommend creating a dedicated package for all your custom message definitions."}),"\n",(0,a.jsx)(s.h2,{id:"step-1-create-a-dedicated-package-for-custom-messages",children:"Step 1: Create a Dedicated Package for Custom Messages"}),"\n",(0,a.jsx)(s.p,{children:"First, let's create a new package dedicated to our custom message interfaces. This package will only contain message definitions and no other code."}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Create the Package"})}),"\n",(0,a.jsxs)(s.p,{children:["Open a terminal and navigate to your ROS 2 workspace (typically named ",(0,a.jsx)(s.code,{children:"ros2_ws"}),"), then create the package:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-sh",children:"cd ~/ros2_ws/src\nros2 pkg create my_robot_interfaces\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Replace ",(0,a.jsx)(s.code,{children:"my_robot"})," with the name of your robot or project."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Clean Up Unnecessary Files"})}),"\n",(0,a.jsxs)(s.p,{children:["Remove the ",(0,a.jsx)(s.code,{children:"include"})," and ",(0,a.jsx)(s.code,{children:"src"})," directories as they are not needed for this package:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-sh",children:"cd my_robot_interfaces\nrm -rf include src\nmkdir msg\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"step-2-configure-package-files",children:"Step 2: Configure Package Files"}),"\n",(0,a.jsxs)(s.p,{children:["We need to configure the ",(0,a.jsx)(s.code,{children:"package.xml"})," and ",(0,a.jsx)(s.code,{children:"CMakeLists.txt"})," files to enable message generation."]}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:(0,a.jsxs)(s.strong,{children:["Edit ",(0,a.jsx)(s.code,{children:"package.xml"})]})}),"\n",(0,a.jsxs)(s.p,{children:["Add the following dependencies inside the ",(0,a.jsx)(s.code,{children:"<dependencies>"})," tag:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:"<build_depend>rosidl_default_generators</build_depend>\n<exec_depend>rosidl_default_runtime</exec_depend>\n<member_of_group>rosidl_interface_packages</member_of_group>\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Your ",(0,a.jsx)(s.code,{children:"package.xml"})," should look something like this:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:'<package format="3">\n  <name>my_robot_interfaces</name>\n  <version>0.0.0</version>\n  <description>The my_robot_interfaces package</description>\n\n  <maintainer email="user@todo.todo">TODO: Maintainer Name</maintainer>\n  <license>TODO: License declaration</license>\n\n  <buildtool_depend>ament_cmake</buildtool_depend>\n\n  <build_depend>rosidl_default_generators</build_depend>\n  <exec_depend>rosidl_default_runtime</exec_depend>\n  <member_of_group>rosidl_interface_packages</member_of_group>\n</package>\n'})}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:(0,a.jsxs)(s.strong,{children:["Edit ",(0,a.jsx)(s.code,{children:"CMakeLists.txt"})]})}),"\n",(0,a.jsx)(s.p,{children:"Make the following changes to configure the build process for message generation:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-cmake",children:'cmake_minimum_required(VERSION 3.5)\nproject(my_robot_interfaces)\n\nfind_package(ament_cmake REQUIRED)\nfind_package(rosidl_default_generators REQUIRED)\n\nrosidl_generate_interfaces(${PROJECT_NAME}\n  "msg/HardwareStatus.msg"\n)\n\nament_package()\n'})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"step-3-define-your-custom-message",children:"Step 3: Define Your Custom Message"}),"\n",(0,a.jsxs)(s.p,{children:["Create a new message definition file inside the ",(0,a.jsx)(s.code,{children:"msg"})," directory."]}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Create the Message File"})}),"\n",(0,a.jsxs)(s.p,{children:["Navigate to the ",(0,a.jsx)(s.code,{children:"msg"})," directory and create a file named ",(0,a.jsx)(s.code,{children:"HardwareStatus.msg"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-sh",children:"cd msg\ntouch HardwareStatus.msg\n"})}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Define the Message Fields"})}),"\n",(0,a.jsxs)(s.p,{children:["Edit ",(0,a.jsx)(s.code,{children:"HardwareStatus.msg"})," to include the following fields:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-plaintext",children:"int64 temperature\nbool are_motors_ready\nstring debug_message\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"step-4-build-the-package",children:"Step 4: Build the Package"}),"\n",(0,a.jsx)(s.p,{children:"Now, we will build the package to generate the message source code."}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Build the Package"})}),"\n",(0,a.jsx)(s.p,{children:"Navigate back to the root of your workspace and build the package:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-sh",children:"cd ~/ros2_ws\ncolcon build --packages-select my_robot_interfaces\n"})}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Source the Workspace"})}),"\n",(0,a.jsx)(s.p,{children:"After building, source your workspace to make the new message available:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-sh",children:"source install/setup.bash\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"step-5-verify-the-message",children:"Step 5: Verify the Message"}),"\n",(0,a.jsxs)(s.p,{children:["You can verify that your message has been generated and is available by using the ",(0,a.jsx)(s.code,{children:"ros2 interface show"})," command:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-sh",children:"ros2 interface show my_robot_interfaces/msg/HardwareStatus\n"})}),"\n",(0,a.jsx)(s.p,{children:"You should see the following output:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-plaintext",children:"int64 temperature\nbool are_motors_ready\nstring debug_message\n"})}),"\n",(0,a.jsx)(s.h2,{id:"step-6-use-the-custom-message-in-your-code",children:"Step 6: Use the Custom Message in Your Code"}),"\n",(0,a.jsx)(s.p,{children:"You can now use your custom message in your ROS 2 nodes."}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Python Example"})}),"\n",(0,a.jsxs)(s.p,{children:["Here is an example of how to publish and subscribe to the ",(0,a.jsx)(s.code,{children:"HardwareStatus"})," message in Python:"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Publisher:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-python",children:"import rclpy\nfrom rclpy.node import Node\nfrom my_robot_interfaces.msg import HardwareStatus\n\nclass HardwareStatusPublisher(Node):\n    def __init__(self):\n        super().__init__('hardware_status_publisher')\n        self.publisher_ = self.create_publisher(HardwareStatus, 'hardware_status', 10)\n        self.timer = self.create_timer(1.0, self.publish_status)\n        self.get_logger().info('Hardware Status Publisher started')\n\n    def publish_status(self):\n        msg = HardwareStatus()\n        msg.temperature = 42\n        msg.are_motors_ready = True\n        msg.debug_message = \"All systems go\"\n        self.publisher_.publish(msg)\n        self.get_logger().info(f'Publishing: {msg}')\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = HardwareStatusPublisher()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Subscriber:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-python",children:"import rclpy\nfrom rclpy.node import Node\nfrom my_robot_interfaces.msg import HardwareStatus\n\nclass HardwareStatusSubscriber(Node):\n    def __init__(self):\n        super().__init__('hardware_status_subscriber')\n        self.subscription = self.create_subscription(\n            HardwareStatus,\n            'hardware_status',\n            self.listener_callback,\n            10)\n        self.subscription  # prevent unused variable warning\n\n    def listener_callback(self, msg):\n        self.get_logger().info(f'Received: temperature={msg.temperature}, are_motors_ready={msg.are_motors_ready}, debug_message={msg.debug_message}')\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = HardwareStatusSubscriber()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"C++ Example"})}),"\n",(0,a.jsxs)(s.p,{children:["Here is an example of how to publish and subscribe to the ",(0,a.jsx)(s.code,{children:"HardwareStatus"})," message in C++:"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Publisher:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-cpp",children:'#include "rclcpp/rclcpp.hpp"\n#include "my_robot_interfaces/msg/hardware_status.hpp"\n\nclass HardwareStatusPublisher : public rclcpp::Node\n{\npublic:\n    HardwareStatusPublisher()\n    : Node("hardware_status_publisher")\n    {\n        publisher_ = this->create_publisher<my_robot_interfaces::msg::HardwareStatus>("hardware_status", 10);\n        timer_ = this->create_wall_timer(\n            std::chrono::seconds(1),\n            std::bind(&HardwareStatusPublisher::publish_status, this));\n        RCLCPP_INFO(this->get_logger(), "Hardware Status Publisher started");\n    }\n\nprivate:\n    void publish_status()\n    {\n        auto msg = my_robot_interfaces::msg::HardwareStatus();\n        msg.temperature = 42;\n        msg.are_motors_ready = true;\n        msg.debug_message = "All systems go";\n        publisher_->publish(msg);\n        RCLCPP_INFO(this->get_logger(), "Publishing: \'%s\'", msg.debug_message.c_str());\n    }\n\n    rclcpp::Publisher<my_robot_interfaces::msg::HardwareStatus>::SharedPtr publisher_;\n    rclcpp::TimerBase::SharedPtr timer_;\n};\n\nint main(int argc, char * argv[])\n{\n    rclcpp::init(argc, argv);\n    rclcpp::spin(std::make_shared<HardwareStatusPublisher>());\n    rclcpp::shutdown();\n    return 0;\n}\n'})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Subscriber:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-cpp",children:'#include "rclcpp/rclcpp.hpp"\n#include "my_robot_interfaces/msg/hardware_status.hpp"\n\nclass HardwareStatusSubscriber : public rclcpp::Node\n{\npublic:\n    HardwareStatusSubscriber()\n    : Node("hardware_status_subscriber")\n    {\n        subscription_ = this->create_subscription<my_robot_interfaces::msg::HardwareStatus>(\n            "hardware_status",\n            10,\n            std::bind(&HardwareStatusSubscriber::topic_callback, this, std::placeholders::_1));\n    }\n\nprivate:\n    void topic_callback(const my_robot_interfaces::msg::HardwareStatus::SharedPtr msg) const\n    {\n        RCLCPP_INFO(this->get_logger(), "Received: temperature=%ld, are_motors_ready=%s, debug_message=%s",\n                    msg->temperature,\n                    msg->are_motors_ready ? "true" : "false",\n                    msg->debug_message.c_str());\n    }\n\n    rclcpp::Subscription<my_robot_interfaces::msg::HardwareStatus>::SharedPtr subscription_;\n};\n\nint main(int argc, char * argv[])\n{\n    rclcpp::init(argc, argv);\n    rclcpp::spin(std::make_shared<HardwareStatusSubscriber>());\n    rclcpp::shutdown();\n    return 0;\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(s.p,{children:"You have successfully created a custom ROS 2 message and learned how to use it in both Python and C++ nodes. This setup ensures that your custom messages are well-organized and easily maintainable."})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>c});var r=n(6540);const a={},t=r.createContext(a);function i(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);