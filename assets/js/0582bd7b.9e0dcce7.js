"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6841],{6524:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"services/definition","title":"ROS 2 Services","description":"Introduction to ROS 2 Services","source":"@site/docs/04_services/02_definition.md","sourceDirName":"04_services","slug":"/services/definition","permalink":"/docs/services/definition","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04_services/02_definition.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Services","permalink":"/docs/services/intro"},"next":{"title":"service-server-py","permalink":"/docs/services/service-server-py"}}');var i=s(4848),t=s(8453);const o={},l="ROS 2 Services",c={},a=[{value:"Introduction to ROS 2 Services",id:"introduction-to-ros-2-services",level:2},{value:"Real-Life Analogy: Online Weather Service",id:"real-life-analogy-online-weather-service",level:2},{value:"ROS 2 Services in Practice",id:"ros-2-services-in-practice",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Example: LED Control in Robotics",id:"example-led-control-in-robotics",level:2},{value:"Service Definition",id:"service-definition",level:2},{value:"Implementation in ROS 2 (Python Example)",id:"implementation-in-ros-2-python-example",level:2},{value:"Summary",id:"summary",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"ros-2-services",children:"ROS 2 Services"})}),"\n",(0,i.jsx)(n.h2,{id:"introduction-to-ros-2-services",children:"Introduction to ROS 2 Services"}),"\n",(0,i.jsx)(n.p,{children:"ROS 2 services provide a synchronous communication mechanism between nodes in a ROS 2 system. This tutorial will introduce ROS 2 services through a detailed explanation and practical examples, comparing them with real-life scenarios and typical applications in robotics."}),"\n",(0,i.jsx)(n.h2,{id:"real-life-analogy-online-weather-service",children:"Real-Life Analogy: Online Weather Service"}),"\n",(0,i.jsx)(n.p,{children:"To understand ROS 2 services, consider the analogy of an online weather service:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Client-Server Relationship"}),": Imagine you are using a computer to get the local weather from an online service. Your computer acts as the client, and the weather service acts as the server."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Request-Response Pattern"}),": The client sends a request to the server with specific information (e.g., your location). The server processes the request and sends back a response (e.g., the weather information for the given location)."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In this analogy, the URL used for the HTTP request is akin to the service name in ROS 2. The client sends a well-formed request (location data), and the server responds with the appropriate data (weather information)."}),"\n",(0,i.jsx)(n.h2,{id:"ros-2-services-in-practice",children:"ROS 2 Services in Practice"}),"\n",(0,i.jsx)(n.p,{children:"In ROS 2, services facilitate a client-server architecture where nodes can request specific actions from other nodes. This section will delve into the implementation details and practical usage of ROS 2 services."}),"\n",(0,i.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Service Name"}),": A unique identifier for the service, similar to the URL in the analogy."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Request Message"}),": The data structure sent by the client to the server."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Response Message"}),": The data structure sent by the server back to the client."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-led-control-in-robotics",children:"Example: LED Control in Robotics"}),"\n",(0,i.jsx)(n.p,{children:"Consider a scenario in a robotics application where you need to control an LED panel:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"LED Panel Node"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Role"}),": Controls the hardware to power on and off LEDs."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Service Server"}),": Implements a service named ",(0,i.jsx)(n.code,{children:"set_led"})," that handles requests to change the state of specific LEDs."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Battery Monitoring Node"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Role"}),": Monitors the battery level and triggers actions based on its state."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Service Client"}),": Sends requests to the ",(0,i.jsx)(n.code,{children:"set_led"})," service to turn LEDs on or off based on battery status."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"service-definition",children:"Service Definition"}),"\n",(0,i.jsxs)(n.p,{children:["For the ",(0,i.jsx)(n.code,{children:"set_led"})," service, you would define the request and response messages as follows:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Request Message"}),": Contains the ID of the LED and the desired state (on or off)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Response Message"}),": Contains a success flag indicating whether the operation was successful."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# set_led.srv\nint32 id\nbool state\n---\nbool success\n"})}),"\n",(0,i.jsx)(n.h2,{id:"implementation-in-ros-2-python-example",children:"Implementation in ROS 2 (Python Example)"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Service Server (LED Panel Node)"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import rclpy\nfrom rclpy.node import Node\nfrom example_interfaces.srv import SetLed\n\nclass LedPanelNode(Node):\n\n    def __init__(self):\n        super().__init__('led_panel')\n        self.srv = self.create_service(SetLed, 'set_led', self.set_led_callback)\n\n    def set_led_callback(self, request, response):\n        led_id = request.id\n        state = request.state\n        # Code to control the LED hardware\n        success = self.control_led(led_id, state)\n        response.success = success\n        return response\n\n    def control_led(self, led_id, state):\n        # Hardware control logic here\n        # For the sake of example, let's assume it always succeeds\n        self.get_logger().info(f'LED {led_id} set to {\"on\" if state else \"off\"}')\n        return True\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = LedPanelNode()\n    rclpy.spin(node)\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Service Client (Battery Monitoring Node)"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import rclpy\nfrom rclpy.node import Node\nfrom example_interfaces.srv import SetLed\n\nclass BatteryMonitorNode(Node):\n\n    def __init__(self):\n        super().__init__('battery_monitor')\n        self.cli = self.create_client(SetLed, 'set_led')\n        while not self.cli.wait_for_service(timeout_sec=1.0):\n            self.get_logger().info('Service not available, waiting...')\n        self.battery_check_timer = self.create_timer(10.0, self.check_battery)\n\n    def check_battery(self):\n        # Dummy check for battery level\n        battery_low = self.is_battery_low()\n        if battery_low:\n            self.send_led_request(3, True)  # Turn on LED 3\n        else:\n            self.send_led_request(3, False)  # Turn off LED 3\n\n    def is_battery_low(self):\n        # Replace with actual battery check logic\n        return True  # Assume battery is low for example\n\n    def send_led_request(self, led_id, state):\n        request = SetLed.Request()\n        request.id = led_id\n        request.state = state\n        self.future = self.cli.call_async(request)\n        self.future.add_done_callback(self.led_response_callback)\n\n    def led_response_callback(self, future):\n        try:\n            response = future.result()\n            if response.success:\n                self.get_logger().info('LED control successful')\n            else:\n                self.get_logger().warn('LED control failed')\n        except Exception as e:\n            self.get_logger().error(f'Service call failed: {e}')\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = BatteryMonitorNode()\n    rclpy.spin(node)\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.p,{children:"ROS 2 services provide a powerful mechanism for implementing client-server communication in robotic systems. They enable nodes to request specific actions from other nodes and receive responses, ensuring a structured and reliable exchange of information. This tutorial has covered the fundamental concepts and provided practical examples to illustrate how to define, implement, and use ROS 2 services effectively."}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"In conclusion, ROS 2 services complement the unidirectional data streams of topics by offering synchronous communication suitable for request-response interactions. They are essential for scenarios where nodes need to perform specific actions based on requests and provide a robust framework for building complex robotic applications."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var r=s(6540);const i={},t=r.createContext(i);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);