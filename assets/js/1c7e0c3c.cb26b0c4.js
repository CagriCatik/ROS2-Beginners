"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5114],{2148:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"interfaces/use-custom-msg-cpp","title":"ROS2 Custom Message: Python and C++ Integration","description":"This tutorial demonstrates how to create a custom ROS2 message and use it in both Python and C++. The process involves creating a custom message, setting up publisher nodes in both languages, and ensuring proper integration with VS Code. This guide assumes a basic understanding of ROS2, Python, and C++.","source":"@site/docs/05_interfaces/04_use-custom-msg-cpp.md","sourceDirName":"05_interfaces","slug":"/interfaces/use-custom-msg-cpp","permalink":"/ROS2-Beginners/docs/interfaces/use-custom-msg-cpp","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/05_interfaces/04_use-custom-msg-cpp.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Creating a Custom ROS 2 Message","permalink":"/ROS2-Beginners/docs/interfaces/create-custom-msg"},"next":{"title":"Creating and Using Custom Messages in ROS2 with Python","permalink":"/ROS2-Beginners/docs/interfaces/use-custom-msg-py"}}');var a=n(4848),t=n(8453);const i={},c="ROS2 Custom Message: Python and C++ Integration",d={},o=[{value:"Step 1: Create a Custom Message",id:"step-1-create-a-custom-message",level:2},{value:"Step 2: Python Publisher Node",id:"step-2-python-publisher-node",level:2},{value:"Step 3: C++ Publisher Node",id:"step-3-c-publisher-node",level:2},{value:"Step 4: Integrate with VS Code",id:"step-4-integrate-with-vs-code",level:2},{value:"Step 5: Verify Integration",id:"step-5-verify-integration",level:2}];function l(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"ros2-custom-message-python-and-c-integration",children:"ROS2 Custom Message: Python and C++ Integration"})}),"\n",(0,a.jsx)(s.p,{children:"This tutorial demonstrates how to create a custom ROS2 message and use it in both Python and C++. The process involves creating a custom message, setting up publisher nodes in both languages, and ensuring proper integration with VS Code. This guide assumes a basic understanding of ROS2, Python, and C++."}),"\n",(0,a.jsx)(s.h2,{id:"step-1-create-a-custom-message",children:"Step 1: Create a Custom Message"}),"\n",(0,a.jsxs)(s.p,{children:["First, create a custom message for your ROS2 package. Assume the package is named ",(0,a.jsx)(s.code,{children:"my_robot_interfaces"}),"."]}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Define the Message:"}),"\nCreate a directory for your messages within your package:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-sh",children:"mkdir -p ~/ros2_ws/src/my_robot_interfaces/msg\n"})}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Create a Message File:"}),"\nCreate a file named ",(0,a.jsx)(s.code,{children:"HardwareStatus.msg"})," in the ",(0,a.jsx)(s.code,{children:"msg"})," directory:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-plaintext",children:"# HardwareStatus.msg\nbool is_operational\nfloat32 temperature\nint32 error_code\n"})}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Update the Package:"}),"\nModify ",(0,a.jsx)(s.code,{children:"package.xml"})," to include the message generation dependencies:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:"<build_depend>rosidl_default_generators</build_depend>\n<exec_depend>rosidl_default_runtime</exec_depend>\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Update ",(0,a.jsx)(s.code,{children:"CMakeLists.txt"})," to generate the custom messages:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-cmake",children:'find_package(rosidl_default_generators REQUIRED)\n\nrosidl_generate_interfaces(${PROJECT_NAME}\n  "msg/HardwareStatus.msg"\n)\n'})}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Build the Package:"}),"\nBuild your package to generate the necessary message headers and libraries:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-sh",children:"colcon build --packages-select my_robot_interfaces\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"step-2-python-publisher-node",children:"Step 2: Python Publisher Node"}),"\n",(0,a.jsxs)(s.p,{children:["Create a Python node to publish the ",(0,a.jsx)(s.code,{children:"HardwareStatus"})," message."]}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Create the Node:"}),"\nCreate a directory for your Python nodes if it doesn't exist:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-sh",children:"mkdir -p ~/ros2_ws/src/my_python_package/my_python_package\n"})}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Python Publisher Script:"}),"\nCreate a script named ",(0,a.jsx)(s.code,{children:"hardware_status_publisher.py"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-python",children:"import rclpy\nfrom rclpy.node import Node\nfrom my_robot_interfaces.msg import HardwareStatus\n\nclass HardwareStatusPublisher(Node):\n    def __init__(self):\n        super().__init__('hardware_status_publisher')\n        self.publisher_ = self.create_publisher(HardwareStatus, 'hardware_status', 10)\n        self.timer = self.create_timer(1.0, self.publish_status)\n\n    def publish_status(self):\n        msg = HardwareStatus()\n        msg.is_operational = True\n        msg.temperature = 36.5\n        msg.error_code = 0\n        self.publisher_.publish(msg)\n        self.get_logger().info(f'Published: {msg}')\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = HardwareStatusPublisher()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsxs)(s.strong,{children:["Update ",(0,a.jsx)(s.code,{children:"setup.py"}),":"]}),"\nEnsure your package is properly set up to include the script:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-python",children:"entry_points={\n    'console_scripts': [\n        'hardware_status_publisher = my_python_package.hardware_status_publisher:main',\n    ],\n},\n"})}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Build and Run:"}),"\nBuild and run the Python node:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-sh",children:"colcon build --packages-select my_python_package\n. install/setup.bash\nros2 run my_python_package hardware_status_publisher\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"step-3-c-publisher-node",children:"Step 3: C++ Publisher Node"}),"\n",(0,a.jsxs)(s.p,{children:["Create a C++ node to publish the ",(0,a.jsx)(s.code,{children:"HardwareStatus"})," message."]}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Create the Node:"}),"\nCreate a directory for your C++ nodes if it doesn't exist:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-sh",children:"mkdir -p ~/ros2_ws/src/my_cpp_package/src\n"})}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"C++ Publisher Source File:"}),"\nCreate a file named ",(0,a.jsx)(s.code,{children:"hardware_status_publisher.cpp"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-cpp",children:'#include <chrono>\n#include <rclcpp/rclcpp.hpp>\n#include "my_robot_interfaces/msg/hardware_status.hpp"\n\nusing namespace std::chrono_literals;\n\nclass HardwareStatusPublisher : public rclcpp::Node\n{\npublic:\n    HardwareStatusPublisher()\n    : Node("hardware_status_publisher")\n    {\n        publisher_ = this->create_publisher<my_robot_interfaces::msg::HardwareStatus>("hardware_status", 10);\n        timer_ = this->create_wall_timer(1s, std::bind(&HardwareStatusPublisher::publish_status, this));\n    }\n\nprivate:\n    void publish_status()\n    {\n        auto message = my_robot_interfaces::msg::HardwareStatus();\n        message.is_operational = true;\n        message.temperature = 36.5;\n        message.error_code = 0;\n        RCLCPP_INFO(this->get_logger(), "Publishing: \'%s\'", message.is_operational ? "true" : "false");\n        publisher_->publish(message);\n    }\n\n    rclcpp::Publisher<my_robot_interfaces::msg::HardwareStatus>::SharedPtr publisher_;\n    rclcpp::TimerBase::SharedPtr timer_;\n};\n\nint main(int argc, char * argv[])\n{\n    rclcpp::init(argc, argv);\n    rclcpp::spin(std::make_shared<HardwareStatusPublisher>());\n    rclcpp::shutdown();\n    return 0;\n}\n'})}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsxs)(s.strong,{children:["Update ",(0,a.jsx)(s.code,{children:"CMakeLists.txt"}),":"]}),"\nModify the ",(0,a.jsx)(s.code,{children:"CMakeLists.txt"})," to build the C++ node:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-cmake",children:"find_package(rclcpp REQUIRED)\nfind_package(my_robot_interfaces REQUIRED)\n\nadd_executable(hardware_status_publisher src/hardware_status_publisher.cpp)\nament_target_dependencies(hardware_status_publisher rclcpp my_robot_interfaces)\ninstall(TARGETS hardware_status_publisher\n  DESTINATION lib/${PROJECT_NAME})\n"})}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Build and Run:"}),"\nBuild and run the C++ node:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-sh",children:"colcon build --packages-select my_cpp_package\n. install/setup.bash\nros2 run my_cpp_package hardware_status_publisher\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"step-4-integrate-with-vs-code",children:"Step 4: Integrate with VS Code"}),"\n",(0,a.jsx)(s.p,{children:"Ensure your VS Code environment is correctly set up to work with ROS2 and your custom message."}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"VS Code Settings:"}),"\nAdd the include directories for the custom message to the ",(0,a.jsx)(s.code,{children:"c_cpp_properties.json"})," file:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-json",children:'{\n    "configurations": [\n        {\n            "name": "Linux",\n            "includePath": [\n                "${workspaceFolder}/**",\n                "~/ros2_ws/install/my_robot_interfaces/include/**"\n            ],\n            "defines": [],\n            "compilerPath": "/usr/bin/gcc",\n            "cStandard": "c11",\n            "cppStandard": "c++14"\n        }\n    ],\n    "version": 4\n}\n'})}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Package Configuration:"}),"\nEnsure the package dependencies are correctly specified in ",(0,a.jsx)(s.code,{children:"package.xml"})," and ",(0,a.jsx)(s.code,{children:"CMakeLists.txt"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-xml",children:"<exec_depend>my_robot_interfaces</exec_depend>\n"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-cmake",children:"find_package(my_robot_interfaces REQUIRED)\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"step-5-verify-integration",children:"Step 5: Verify Integration"}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Run the Python Node:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-sh",children:"ros2 run my_python_package hardware_status_publisher\n"})}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Run the C++ Node:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-sh",children:"ros2 run my_cpp_package hardware_status_publisher\n"})}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Verify Messages:"}),"\nUse ",(0,a.jsx)(s.code,{children:"ros2 topic echo"})," to verify messages:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-sh",children:"ros2 topic echo /hardware_status\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"If everything is set up correctly, you should see messages being published from both the Python and C++ nodes."}),"\n",(0,a.jsx)(s.p,{children:"This tutorial provides a comprehensive guide to creating and using custom ROS2 messages in both Python and C++. By following these steps, you can ensure proper integration and functionality in a robust and scientifically accurate manner."})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>c});var r=n(6540);const a={},t=r.createContext(a);function i(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);