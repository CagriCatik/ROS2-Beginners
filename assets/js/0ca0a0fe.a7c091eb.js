"use strict";(self.webpackChunkROS2_Beginners=self.webpackChunkROS2_Beginners||[]).push([[7859],{5560:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"node-settings/intro","title":"Introduction","description":"This tutorial aims to provide an in-depth understanding of ROS2 parameters, focusing on their declaration, retrieval, and usage within ROS2 nodes. Parameters are essential for configuring nodes at runtime, allowing for flexible and dynamic operation. By the end of this tutorial, you will be proficient in using ROS2 parameters in your applications.","source":"@site/docs/06_node-settings/01_intro.md","sourceDirName":"06_node-settings","slug":"/node-settings/intro","permalink":"/ROS2-Beginners/docs/node-settings/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/06_node-settings/01_intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Node Settings","permalink":"/ROS2-Beginners/docs/category/node-settings"},"next":{"title":"ROS 2 Parameters","permalink":"/ROS2-Beginners/docs/node-settings/parameter"}}');var t=r(4848),i=r(8453);const s={},l="Introduction",o={},p=[{value:"Overview of ROS2 Parameters",id:"overview-of-ros2-parameters",level:2},{value:"Declaring Parameters in ROS2",id:"declaring-parameters-in-ros2",level:2},{value:"Example in Python (rclpy)",id:"example-in-python-rclpy",level:3},{value:"Example in C++ (rclcpp)",id:"example-in-c-rclcpp",level:3},{value:"Retrieving Parameters in ROS2",id:"retrieving-parameters-in-ros2",level:2},{value:"Example in Python (rclpy)",id:"example-in-python-rclpy-1",level:3},{value:"Example in C++ (rclcpp)",id:"example-in-c-rclcpp-1",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,t.jsx)(a.p,{children:"This tutorial aims to provide an in-depth understanding of ROS2 parameters, focusing on their declaration, retrieval, and usage within ROS2 nodes. Parameters are essential for configuring nodes at runtime, allowing for flexible and dynamic operation. By the end of this tutorial, you will be proficient in using ROS2 parameters in your applications."}),"\n",(0,t.jsx)(a.h2,{id:"overview-of-ros2-parameters",children:"Overview of ROS2 Parameters"}),"\n",(0,t.jsx)(a.p,{children:"ROS2 parameters enable the configuration of nodes by setting values that can be adjusted without modifying the code. These parameters are stored in key-value pairs and can be of various types, such as integers, floats, strings, booleans, and arrays. Parameters are particularly useful for:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Adjusting node behavior without recompilation."}),"\n",(0,t.jsx)(a.li,{children:"Managing configuration data."}),"\n",(0,t.jsx)(a.li,{children:"Facilitating reusable and maintainable code."}),"\n"]}),"\n",(0,t.jsx)(a.h2,{id:"declaring-parameters-in-ros2",children:"Declaring Parameters in ROS2"}),"\n",(0,t.jsx)(a.p,{children:"Parameters must be declared within a node before they can be used. This declaration ensures that the parameters are recognized by the ROS2 parameter server. Here's how to declare parameters in a ROS2 node:"}),"\n",(0,t.jsx)(a.h3,{id:"example-in-python-rclpy",children:"Example in Python (rclpy)"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:"import rclpy\nfrom rclpy.node import Node\n\nclass ParameterNode(Node):\n    def __init__(self):\n        super().__init__('parameter_node')\n        # Declare a parameter with a default value\n        self.declare_parameter('my_param', 'default_value')\n        \n        # Declare multiple parameters\n        self.declare_parameters(\n            namespace='',\n            parameters=[\n                ('param_1', 42),\n                ('param_2', 3.14),\n                ('param_3', True),\n            ]\n        )\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = ParameterNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,t.jsx)(a.h3,{id:"example-in-c-rclcpp",children:"Example in C++ (rclcpp)"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-cpp",children:'#include "rclcpp/rclcpp.hpp"\n\nclass ParameterNode : public rclcpp::Node\n{\npublic:\n    ParameterNode()\n    : Node("parameter_node")\n    {\n        // Declare a parameter with a default value\n        this->declare_parameter<std::string>("my_param", "default_value");\n        \n        // Declare multiple parameters\n        this->declare_parameter<int>("param_1", 42);\n        this->declare_parameter<double>("param_2", 3.14);\n        this->declare_parameter<bool>("param_3", true);\n    }\n};\n\nint main(int argc, char **argv)\n{\n    rclcpp::init(argc, argv);\n    auto node = std::make_shared<ParameterNode>();\n    rclcpp::spin(node);\n    rclcpp::shutdown();\n    return 0;\n}\n'})}),"\n",(0,t.jsx)(a.h2,{id:"retrieving-parameters-in-ros2",children:"Retrieving Parameters in ROS2"}),"\n",(0,t.jsx)(a.p,{children:"Once parameters are declared, they can be retrieved and used within the node. Here\u2019s how to get the parameters:"}),"\n",(0,t.jsx)(a.h3,{id:"example-in-python-rclpy-1",children:"Example in Python (rclpy)"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:"class ParameterNode(Node):\n    def __init__(self):\n        super().__init__('parameter_node')\n        self.declare_parameter('my_param', 'default_value')\n        self.declare_parameters(\n            namespace='',\n            parameters=[\n                ('param_1', 42),\n                ('param_2', 3.14),\n                ('param_3', True),\n            ]\n        )\n        \n        # Retrieve parameters\n        my_param = self.get_parameter('my_param').get_parameter_value().string_value\n        param_1 = self.get_parameter('param_1').get_parameter_value().integer_value\n        param_2 = self.get_parameter('param_2').get_parameter_value().double_value\n        param_3 = self.get_parameter('param_3').get_parameter_value().bool_value\n        \n        # Use the parameters\n        self.get_logger().info(f'my_param: {my_param}')\n        self.get_logger().info(f'param_1: {param_1}')\n        self.get_logger().info(f'param_2: {param_2}')\n        self.get_logger().info(f'param_3: {param_3}')\n\n# Remaining part of the main function stays the same\n"})}),"\n",(0,t.jsx)(a.h3,{id:"example-in-c-rclcpp-1",children:"Example in C++ (rclcpp)"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-cpp",children:'class ParameterNode : public rclcpp::Node\n{\npublic:\n    ParameterNode()\n    : Node("parameter_node")\n    {\n        this->declare_parameter<std::string>("my_param", "default_value");\n        this->declare_parameter<int>("param_1", 42);\n        this->declare_parameter<double>("param_2", 3.14);\n        this->declare_parameter<bool>("param_3", true);\n        \n        // Retrieve parameters\n        std::string my_param = this->get_parameter("my_param").as_string();\n        int param_1 = this->get_parameter("param_1").as_int();\n        double param_2 = this->get_parameter("param_2").as_double();\n        bool param_3 = this->get_parameter("param_3").as_bool();\n        \n        // Use the parameters\n        RCLCPP_INFO(this->get_logger(), "my_param: %s", my_param.c_str());\n        RCLCPP_INFO(this->get_logger(), "param_1: %d", param_1);\n        RCLCPP_INFO(this->get_logger(), "param_2: %f", param_2);\n        RCLCPP_INFO(this->get_logger(), "param_3: %s", param_3 ? "true" : "false");\n    }\n};\n\nint main(int argc, char **argv)\n{\n    rclcpp::init(argc, argv);\n    auto node = std::make_shared<ParameterNode>();\n    rclcpp::spin(node);\n    rclcpp::shutdown();\n    return 0;\n}\n'})}),"\n",(0,t.jsx)(a.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(a.p,{children:"This tutorial has provided a detailed examination of ROS2 parameters, covering their declaration and retrieval in both Python and C++. By utilizing parameters effectively, you can create more flexible and configurable ROS2 nodes, enhancing the overall robustness and maintainability of your applications."})]})}function d(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,a,r)=>{r.d(a,{R:()=>s,x:()=>l});var n=r(6540);const t={},i=n.createContext(t);function s(e){const a=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),n.createElement(i.Provider,{value:a},e.children)}}}]);